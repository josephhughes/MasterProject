# Making the confidence intervals plot of the results about 111 leaves samples in figure 11
# before 140 is similar to boxplotMaker, but here the correct number of each event and the number inferred by tools are collected 
library(dplyr)
library(reshape2)
library(ggplot2)
library(readr)

Names <- c("Cospeciation","Duplication","Switch","Sorting","Groups")
eventName = c("Events","Differences", "Conditions")
mName <- c("Conditions","Events","Differences")
#111R answer
setwd("C:/Users/49688/Documents/simulation/pycharm")
r111R = read.csv("r111R.txt",header = TRUE, sep =" ")
r111R <-melt(r111R)
r111R <- cbind(r111R, rep("Ans"))
names(r111R) <- eventName 
List <- r111R

setwd("C:/Users/49688/Documents/simulation/pycharm/Janes")
#DJ111R
DJ111R = read.csv("ODJ111R.txt",header = TRUE, sep =" ")
DJ111R <-melt(DJ111R)
DJ111R <- cbind(DJ111R, rep("DJ"))
names(DJ111R) <- eventName 
List <- rbind(List, DJ111R)


#DE111R
setwd("C:/Users/49688/Documents/simulation/pycharm/Eucalypt")

lines = read_lines("DE111R.txt", skip = 1)
lines
DE111R = data.frame(matrix(ncol = 4, nrow = 60))
n = 1
for (line in lines)
{
  line = strsplit(line, "\\s+")[[1]]
  if (grepl("Solution", line) == FALSE && grepl("Time",line) == FALSE)
  {
    DE111R[n,1] <- as.numeric(line[1])
    DE111R[n,2] <- as.numeric(line[2])
    DE111R[n,3] <- as.numeric(line[3])
    DE111R[n,4] <- as.numeric(line[4])
    n = n + 1
  }
}
DE111R <- cbind(DE111R[1:n-1,], rep("DE"))
names(DE111R) <- Names
DE111R <- melt(DE111R)
names(DE111R) <- mName
List <- rbind(List,DE111R)



setwd("C:/Users/49688/Documents/simulation/pycharm/CoRe")
#DC111R
lines = read_lines("ODC111R.txt", skip = 1)
lines
DC111R = data.frame(matrix(ncol = 4, nrow = 111))
n = 1
for (line in lines)
{
  line = strsplit(line, "\\s+")[[1]]
  if (grepl("Solution", line) == FALSE && grepl("Time",line) == FALSE)
  {
    DC111R[n,1] <- as.numeric(line[1])
    if(line[2] != '?')
    {
      DC111R[n,2] <- as.numeric(line[2])
    }
    if(line[3] != '?')
    {
      DC111R[n,3] <- as.numeric(line[3])
    }
    if(line[4] != '?')
    {
      DC111R[n,4] <- as.numeric(line[4])
    }
    n = n + 1
  }
}
DC111R <- cbind(DC111R[1:n-1,], rep("DC"))
DC111R
names(DC111R) <- Names
DC111R <- DC111R[c(1,4,5)]
DC111R <- melt(DC111R)
DC111R
names(DC111R) <- c("Conditions","Events","Differences")
DC111R
List <- rbind(List,DC111R)

#SC111R
lines = read_lines("OSC111R.txt", skip = 1)
lines
SC111R = data.frame(matrix(ncol = 4, nrow = 111))
n = 1
for (line in lines)
{
  line = strsplit(line, "\\s+")[[1]]
  if (grepl("Solution", line) == FALSE && grepl("Time",line) == FALSE)
  {
    SC111R[n,1] <- as.numeric(line[1])
    if(line[2] != '?')
    {
      SC111R[n,2] <- as.numeric(line[2])
    }
    if(line[3] != '?')
    {
      SC111R[n,3] <- as.numeric(line[3])
    }
    if(line[4] != '?')
    {
      SC111R[n,4] <- as.numeric(line[4])
    }
    n = n + 1
  }
}
SC111R <- cbind(SC111R[1:n-1,], rep("SC"))
SC111R
names(SC111R) <- Names
SC111R <- SC111R[c(1,5)]
SC111R <- melt(SC111R)
SC111R
names(SC111R) <- c("Conditions","Events","Differences")
SC111R
List <- rbind(List,SC111R)

#TreeCollapse111R
setwd("C:/Users/49688/Documents/simulation/pycharm/TreeCollapse")
DTC111R = read.csv("OTC111R.txt",header = TRUE, sep =" ")
DTC111R
DTC111R <-melt(DTC111R)
DTC111R <- cbind(DTC111R, rep("TC"))
names(DTC111R) <- eventName 
List <- rbind(List, DTC111R)

levels(List$Conditions)


#Anova statistics in table 4 and confidence intervals done by Tukey test in figure 11
#aNova and TukeyHSD
# one row for four plots
par(mfrow=c(1,4))
#Anova and Turkey test
# self defined Turkey test plot function 
tuk_plot <- function (t, x, ...) 
{
  for (i in seq_along(x)) {
    xi <- x[[i]][, -4L, drop = FALSE]
    yvals <- nrow(xi):1L
    dev.hold()
    on.exit(dev.flush())
    plot(c(xi[, "lwr"], xi[, "upr"]), rep.int(yvals, 
                                              2L), type = "n", axes = FALSE, xlab = "", 
         ylab = "", main = NULL, ...)
    axis(1, ...)
    axis(2, at = nrow(xi):1, labels = dimnames(xi)[[1L]], 
         srt = 0, ...)
    abline(h = yvals, lty = 1, lwd = 0.5, col = "lightgray")
    abline(v = 0, lty = 2, lwd = 0.5, ...)
    segments(xi[, "lwr"], yvals, xi[, "upr"], 
             yvals, ...)
    segments(as.vector(xi), rep.int(yvals - 0.1, 3L), as.vector(xi), 
             rep.int(yvals + 0.1, 3L), ...)
    str <- paste0("% family-wise confidence level of ", t,"\n")
    title(main = paste0(t), 
          xlab = paste("Differences in mean levels of", 
                       names(x)[i]))
    box()
    dev.flush()
    on.exit()
  }
}

#Cospeciation
co <- List[which(List$Events == "Cospeciation"),][c("Differences","Conditions")]
#Computes summary of statistics by groups
co.aov <- aov(Differences ~ Conditions, co)
#anova
summary(co.aov)
co.tk <- TukeyHSD(co.aov)
co.tk
# Tuckey test representation :
tuk_plot("Cospeication", co.tk , las=1 , col="brown")

#Duplication
du <- List[which(List$Events == "Duplication"),][c(2,3)]
#Computes summary of statistics by groups
#anova
du.aov <- aov(Differences ~ Conditions, du)
#Tukey
du.tk <- TukeyHSD(du.aov)
du.tk
# Tuckey test representation :
tuk_plot("Duplication", du.tk , las=1 , col="brown")

#Host switch
e <- List[which(List$Events == "Switch"),][c(2,3)]
#Computes summary of statistics by groups
aov <- aov(Differences ~ Conditions, e)
tk <- TukeyHSD(aov)
# Tuckey test representation :
tuk_plot("Host Switching", tk , las=1 , col="brown")

#Sorting
e <- List[which(List$Events == "Sorting"),][c(2,3)]
#Computes summary of statistics by groups
aov <- aov(Differences ~ Conditions, e)
tk <- TukeyHSD(aov)
# Tuckey test representation :
tuk_plot("Sorting", tk , las=1 , col="brown")
mtext("95% family-wise of confidence level", side = 3, line = -1.5, outer = TRUE)
